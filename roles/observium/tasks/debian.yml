---
# handlers file for common
# - name: Enable the universe and multiverse repositories
#   shell: apt-add-repository universe
- name: install | Enable the universe and multiverse repositories
  shell: apt-add-repository multiverse

- name: install | Install the packages we need to run Observium
  apt:
    name: "{{ item }}"
    state: "present"
  with_items: '{{ observium_debian_pre_reqs }}'

# - name: debian | Installing LibVirt Packages to monitor (If Desired)
#   apt:
#     name: "{{ libvirt-bin }}"
#     state: "present"
#     when: observium_monitor_libvirt_vms

- name: install | First, create a directory for Observium to live in {{ observium_dl_dir }}
  get_url:
    url: "{{ observium_dl_url }}/{{ observium_dl_package }}"
    dest: "{{ observium_dl_dir }}/{{ observium_dl_package }}"

- name: install | Download the latest .tar.gz of Observium and unpack {{ observium_dl_dir }}
  unarchive:
    src: "{{ observium_dl_dir }}/{{ observium_dl_package }}"
    dest: "{{ observium_dl_dir }}"
    creates: "{{ observium_base_dir }}/poller.php"
    copy: no

- name: config | Creating Observium DB
  mysql_db:
    name: "{{ observium_db_info.db }}"
    state: "present"

- name: config | Creating Observium DB Permissions
  mysql_user:
    name: "{{ observium_db_info.user }}"
    password: "{{ observium_db_info.password }}"
    priv: "observium.*:ALL"

- name: config | Configuring Observium
  template:
    src: "config.php.j2"
    dest: "{{ observium_base_dir }}/config.php"

- name: config | Creating Logs and Graph Directories
  file:
    path: "{{ item }}"
    state: "directory"
  with_items:
    - '{{ observium_base_dir }}/logs'
    - '{{ observium_base_dir }}/rrd'

- name: config | Setting Permissions on Graph Directory
  file:
    path: "{{ observium_base_dir }}/rrd"
    state: "directory"
    owner: "{{ web_owner }}"
    group: "{{ web_group }}"
    recurse: yes

- name: config | Checking if Observium DB Has Been Populated
  stat:
    path: "/root/.observium_db_populated"
  register: "observium_db_populated_check"

- name: config | Populating Observium DB
  command: "{{ observium_base_dir }}/discovery.php -u"
  register: "observium_db_populated"
  when: not observium_db_populated_check.stat.exists

- name: config | Marking Observium DB as Populated
  file:
    path: "/root/.observium_db_populated"
    state: "touch"
  when: observium_db_populated.changed

- name: config | Configuring Apache Site
  template:
    src: "etc/apache2/sites-available/000-default.conf.j2"
    dest: "/etc/apache2/sites-available/000-default.conf"
    owner: "root"
    group: "root"
    mode: 0644
    backup: yes
  notify:
    - 'restart {{ webserver_handler }}'
  when: ansible_os_family == "Debian"

- name: config | Checking Enabled PHP Mods
  command: "php -m"
  register: php_mods_enabled
  changed_when: false

- name: config | Ensuring PHP Mods are Enabled.Enable php mcrypt module if it's installed
  command: "phpenmod {{ item }}"
  with_items:
    - 'mcrypt'
  when: item not in php_mods_enabled.stdout_lines

- name: config | Ensuring Apache Mods are Enabled.Enable mod_rewrite for Observium's URLs
  apache2_module:
    name: "{{ item }}"
    state: "present"
  notify:
    - 'restart {{ webserver_handler }}'
  with_items:
    - 'rewrite'

- name: users | Checking if Observium Admin Account Has Been Created
  stat:
    path: "/root/.observium_admin_account_created"
  register: "observium_admin_account_created_check"

- name: users | Creating Observium Admin Account.Add a first user, use level of 10 for admin
  command: "{{ observium_base_dir }}/adduser.php {{ observium_admin_account_info.username }} {{ observium_admin_account_info.password }} {{ observium_admin_account_info.level }} {{ observium_admin_account_info.email }}"
  register: "observium_admin_account_created"
  when: not observium_admin_account_created_check.stat.exists

- name: users | Marking Observium Admin Account as Created
  file:
    path: "/root/.observium_admin_account_created"
    state: "touch"
  when: observium_admin_account_created.changed

- name: config | add device ansi01 to monitor
  command: "{{ observium_base_dir }}/add_device.php ansi01 observium v2c"

- name: config | Perform Initial Discovery
  command: "{{ observium_base_dir }}/discovery.php -h all"

- name: config | Perform Initial  Poll
  command: "{{ observium_base_dir }}/poller.php -h all"


- name: ensure /etc/cron.d exists
  file:
    path: '/etc/cron.d'
    state: directory

- name: PATH added to crontab observium.Add cron jobs, create a new file /etc/cron.d/observium
  cronvar:
    name: PATH
    value: "/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin"
    user: root
    cron_file: 'observium'

- name: Schedule jobs for observium.
  cron: name='{{ item.name }}'
        job='{{ item.job }}'
        user='root'
        cron_file='observium'
        hour='{{ item.hour }}'
        minute='{{ item.minute }}'
        state=present
  with_items:
#  Add /dev/null to commands to supress stdout normal emails to root.send  emails only if there is some stderr
    - name: "Run a complete discovery of all devices once every 6 hours"
      job: "/opt/observium/discovery.php -h all >> /dev/null 2>&1"
      hour: "*/6"
      minute: "33"

    - name: "Run automated discovery of newly added devices every 5 minutes"
      job: "/opt/observium/discovery.php -h new >> /dev/null 2>&1"
      hour: "*"
      minute: "*/5"

    - name: "Run multithreaded poller wrapper every 5 minutes"
      job: "/opt/observium/poller-wrapper.py 6 >> /dev/null 2>&1"
      hour: "*"
      minute: "*/5"

    - name: "Run housekeeping script daily for syslog, eventlog and alert log"
      job: "/opt/observium/housekeeping.php -ysel >> /dev/null 2>&1"
      hour: "5"
      minute: "13"

    - name: "Run housekeeping script daily for rrds, ports, orphaned entries in the database and performance data"
      job: "/opt/observium/housekeeping.php -yrptb >> /dev/null 2>&1"
      hour: "4"
      minute: "47"
